unit Rollout;

interface

uses
  SysUtils, math, expectedlen, Classes, Customers, Demands,
  Pairs,flex, Subroutines, Vehicles, States, Typez;
  function simulate(var pa:pair):ccustarray;
  function firstnode(seq:custarray;l:customer;var ec:real):custarray;
  function updte(var pe:pair; cstate:state; nnode:customer; d:boolean;i:integer):state;
  procedure mark_visited(seq:custarray;node:customer);
  procedure gen_demand(seq:custarray);
  procedure apriori_length(seq:custarray;st:state);
  function generate_auxseq(seq:custarray;i:integer;nnode:customer):custarray;
  function roll(seq:custarray; l,cp:customer; cq,i:integer; var d:boolean;var ecost:real):customer;
  function capac(ini_cap:integer;de:integer;d:boolean):integer;
  function next(pos:customer;node:customer;b:boolean):real;
  procedure switch(var seq:ccustarray);

 var
 fseq:ccustarray;
 fs:intarray;

implementation

function simulate(var pa:pair):ccustarray;
var
cstate:state;
nnode:custarray;
l,anode,bnode:customer;
d:barray;
t,ad,bd,cd:boolean;
i,j,cq:integer;
sf1,sf2,acost,bcost,ccost,dcost,ec:real;
nexxt,ecost:rearray;
nseq:ccustarray;

begin

  cstate:= state.create(dep,q);
  cstate.dems:= dems;
  setlength(nnode,2);
  setlength(d,2);
  setlength(nexxt,2);
  setlength(ecost,2);
  setlength(fseq,2);
  setlength(nseq,2);
  setlength(fs,2);
  l:=pa.line;
  t:=false;

  for i := 0 to 1 do
    begin
      setlength(nseq[i],length(pa.ve[i].custs));
      nseq[i]:=pa.ve[i].custs;
      mark_visited(nseq[i],dep);
      setlength(nseq[i],length(nseq[i])-1);

      //Define first node
      nseq[i]:= firstnode(nseq[i],pa.line,ec);
      ecost[i]:= ec;
      descrb(cstate);
      apriori_length(nseq[i],cstate);

      nnode[i]:=nseq[i,0];
      nexxt[i]:=dist[0,nnode[i].id];
      mark_visited(nseq[i],nnode[i]);
      setlength(nseq[i],length(nseq[i])-1);
      fs[i]:=-1;
    end;

  Writeln(' ');
  Writeln('Rolling out...');

  repeat //Define next customer
  begin

    //Who's next??
    i:=0;
    sf1:= sofar(fseq[i])+nexxt[i];
    sf2:= sofar(fseq[i+1])+nexxt[i+1];
    if (sf1>sf2) then i:=1;

    //Update the state
    cstate:= updte(pa,cstate,nnode[i],d[i],i);
    descrb(cstate);

    fs[i]:=fs[i]+1;
    setlength(fseq[i],fs[i]+1);
    fseq[i,fs[i]]:=nnode[i];

    if length(nseq[i])>0 then
    begin
      acost:=0;
      bcost:=0;
      ccost:=0;

      //No switch
      anode:=roll(nseq[i],l,pa.ve[i].cp,pa.ve[i].cq,i,ad,acost);

      //Switch
      bnode:=roll(nseq[c(i+1,2)],l,pa.ve[i].cp,pa.ve[i].cq,i,bd,bcost);
      for j := nnode[c(i+1,2)].dem.dmin to nnode[c(i+1,2)].dem.dmax do
      begin
        cq:= capac(pa.ve[c(i+1,2)].cq,j,d[c(i+1,2)]);
        roll(nseq[c(i+1,2)],l,pa.ve[c(i+1,2)].cp,cq,i,cd,dcost);
        ccost:=ccost+dcost;
      end;

    //Switch??
      if (bcost+ccost/nnode[c(i+1,2)].dem.num)< (acost+ecost[c(i+1,2)]) then
      begin
        nnode[i]:=bnode;
        ecost[i]:=bcost;
        d[i]:=bd;
        nexxt[i]:=next(pa.ve[i].cp,bnode,bd);
        switch(nseq);
      end
      else
        begin
          nnode[i]:=anode;
          ecost[i]:=acost;
          d[i]:=ad;
          nexxt[i]:=next(pa.ve[i].cp,anode,ad);
        end;

    mark_visited(nseq[i],nnode[i]);
    setlength(nseq[i],length(nseq[i])-1);

    //Last??
    if not((length(nseq[c(i+1,2)])>0) or (length(nseq[i])>0)) then
    begin
      cstate:= updte(pa,cstate,nnode[i],d[i],i);
      descrb(cstate);
      t:=true;
    end;
  end
  else nexxt[i]:=infinity;
  end;
  until t=true;

  result:=fseq;

end;

procedure gen_demand(seq:custarray);
var
dem:intarray;
i,j:integer;
f:real;
begin
    Writeln(' ');
    Writeln('Generating demand...');
    setlength(dem,n);

    for j := 0 to length(seq) - 1 do
    begin
      randomize;
      f:=random;
      dem[seq[j].ID]:=seq[j].dem.dmax;
      for I := seq[j].dem.num-1 downto 1 do
        if f<(i/seq[j].dem.num) then
        begin
          dem[seq[j].id]:=seq[j].dem.dmax - (seq[j].dem.num-i);
        end;
    end;  
    dems:=dem;
end;

procedure apriori_length(seq:custarray;st:state);
var
I,j:integer;
cq:integer;
apseq:custarray;
aseq:string;
td:real;
begin
   //First customer
   cq:=q;
   j:=-1;
   setlength(apseq,3*n);

  for i := 0 to length(seq) - 2 do      //Middle customers
  begin
    j:=j+1;
    apseq[j]:=seq[i];
    if cq<st.dems[seq[i].ID] then
    begin
      j:=j+1;
      apseq[j]:= dep;
      j:=j+1;
      apseq[j]:= seq[i];
      cq:= cq+q- st.dems[seq[i].ID];
    end
    else
    begin
      if cq=st.dems[seq[i].ID] then
      begin
        j:=j+1;
        apseq[j]:= dep;
        cq:=q;
      end
      else
      begin
      cq:=cq-st.dems[seq[i].ID];
      end;
    end;
  end;
    //Final customeer
       if cq<st.dems[seq[length(seq)-1].ID] then
      begin
        j:=j+1;
        apseq[j]:= dep;
      end;
        j:=j+1;
        apseq[j]:= seq[length(seq)-1];
        setlength(apseq,j+1);

      for i := 0 to j do aseq:=aseq+floattostr(apseq[i].id)+'-';
        
      td:= seq_length(apseq);

    Writeln('With this demand, the path without rollout is 0-'+aseq+
    '0 and its distance is ' +floattostr(td));
end;

function roll(seq:custarray; l,cp:customer; cq,i:integer; var d:boolean;var ecost:real):customer;
var
notgo,go,cnotgo,cgo:real;
j:integer;
aseq:custarray;
nnotgo,ngo,nnode:customer;
go_ng: rearray;

begin
    notgo:=infinity;
    go:=infinity;
    setlength(go_ng,2);

    for j := 0 to length(seq)-1 do
    begin

      aseq:=generate_auxseq(seq,j,cp);
      ini_cos(length(aseq));
      go_ng:= cgo_notgo(aseq,cq,0,l);

      //Straight to next customer
      cnotgo:= go_ng[0];
      if cnotgo<notgo then
      begin
        notgo:=cnotgo;
        nnotgo:=aseq[1];
      end;

      //Let's go to the depot first
      cgo:= go_ng[1];
      if cgo<go then
      begin
        go:=cgo;
        ngo:=aseq[1];
      end;
    end;

    //Best decision?
      if notgo<go then
      begin
        d:=false;
        nnode:=nnotgo;
        ecost:=notgo;
      end
      else
        begin
          d:=true;
          nnode:=ngo;
          ecost:=go;
      end;
      result:=nnode;
end;

function generate_auxseq(seq:custarray;i:integer;nnode:customer):custarray;
var
j:integer;
aseq:custarray;
begin
  setlength(aseq,length(seq)+1);
    for j := 0 to length(seq) - 1 do aseq[j]:=seq[c(1+j+i,length(seq))];
    for j := length(aseq) - 2 downto 0 do aseq[j+1]:=aseq[j];
    aseq[0]:=nnode;
    result:=aseq;
end;

function firstnode(seq:custarray;l:customer;var ec:real):custarray;
var

elen,mlen:real;
i,j:integer;
aux,fnode: custarray;

begin
  mlen:=infinity;
  setlength(aux,length(seq)+1);
  setlength(fnode,length(seq));
  for i := 0 to length(seq) - 1 do
  begin
    for j := 0 to length(seq) - 1 do aux[j]:=seq[c(i+j,length(seq))];
    for j := length(aux) - 2 downto 0 do aux[j+1]:=aux[j];
    aux[0]:=dep;
    elen:= expcos(aux,q,0,l);

    if elen< mlen then
    begin
      mlen:=elen;
      for j := 0 to length(fnode) - 1 do fnode[j] := aux[j+1];
    end;
    ec:=mlen;
  end;
  Writeln('Starting at customer '+floattostr(fnode[0].id)+
            ' with expected length '+floattostr(mlen));

  result:= fnode;
end;

procedure mark_visited(seq:custarray;node:customer);
var
i,j:integer;
begin
   for i := 0 to length(seq) - 1 do
      if seq[i]=node then
        for j := i to length(seq) - 2 do
        begin
        seq[j]:= seq[j+1];
      end;
    setlength(seq,length(seq)-1);
end;

function updte(var pe:pair; cstate:state; nnode:customer; d:boolean;i:integer):state;
var
nstate:state;
de:integer;

begin
  nstate :=state.create(nnode,pe.ve[i].cq);
  pe.ve[i].cp:=nnode;
  de:= cstate.dems[nnode.ID];
  //write('era '+inttostr(pe.ve[i].cq));
  nstate.dems:=cstate.dems;
  nstate.dems[nnode.ID]:=0;

  if d=false then  //New capacity
  begin
    if de>pe.ve[i].cq then
    begin
      //Have to go anyway
      nstate.cu_cap:=pe.ve[i].cq+q-de;
      pe.ve[i].cq:=pe.ve[i].cq+q-de;
      fs[i]:=fs[i]+1;
      setlength(fseq[i],fs[i]+1);
      fseq[i,fs[i]]:=nnode;
      fs[i]:=fs[i]+1;
      setlength(fseq[i],fs[i]+1);
      fseq[i,fs[i]]:=dep;
    end
    else
    begin
    nstate.cu_cap:=pe.ve[i].cq-de;
    pe.ve[i].cq:=pe.ve[i].cq-de;
    end;
  end
  else
  begin
    fs[i]:=fs[i]+1;
    setlength(fseq[i],fs[i]+1);
    fseq[i,fs[i]]:=dep;
    nstate.cu_cap:= q-de;
    pe.ve[i].cq:= q-de;
  end;
  //write(' y ahora es '+inttostr(pe.ve[i].cq));
  result:= nstate;
end;

function capac(ini_cap:integer;de:integer;d:boolean):integer;
begin
if d=false then  //New capacity
  begin
    if de>ini_cap then
    begin
      //Have to go anyway
      result:=ini_cap+q-de;
    end
    else
    result:=ini_cap-de;
  end
  else
  begin
    result:= q-de;
  end;
end;

function next(pos:customer;node:customer;b:boolean):real;
begin
  if b=true then
  begin
    result:= dist[pos.id,0]+dist[node.ID,0];
    end
    else result:= dist[pos.id,node.id];
end;

procedure switch(var seq:ccustarray);
var
auxi:custarray;
begin
   auxi:=seq[0];
   seq[0]:=seq[1];
   seq[1]:=auxi;
end;
end.
